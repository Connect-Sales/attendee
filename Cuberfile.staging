if !ENV['GOOGLE_CLOUD_PROJECT_ID']
    throw 'GOOGLE_CLOUD_PROJECT_ID is not set'
end

def google_cloud_secret(secret_name)
    return `gcloud secrets versions access latest --secret="#{secret_name}" --project="#{ENV['GOOGLE_CLOUD_PROJECT_ID']}"`
end
# Give a name to your app
app 'attendee'

# Get the code from this Git repository
repo '.'

# Build the Docker image automatically (or provide a Dockerfile)
dockerfile 'Dockerfile'

# Publish the Docker image in a registry
image 'nduncanattendee/attendee'

# Connect to this Kubernetes cluster
kubeconfig '/home/nduncan/.kube/config'

health 'https://web-service.attendee.svc.cluster.local/health'

ingress true
lb 'kubernetes.io/ingress.global-static-ip-name', 'web-static-ip'
lb 'kubernetes.io/ingress.class', 'gce'
lb 'networking.gke.io/managed-certificates', 'attendee-cert-4'
lb 'kubernetes.io/ingress.allow-http', 'false'

env 'DJANGO_SETTINGS_MODULE', 'attendee.settings.production'
env 'DJANGO_SECRET_KEY', google_cloud_secret('DJANGO_SECRET_KEY'), secret: true

env 'CREDENTIALS_ENCRYPTION_KEY', google_cloud_secret('CREDENTIALS_ENCRYPTION_KEY'), secret: true
env 'DATABASE_URL', google_cloud_secret('DATABASE_URL'), secret: true
env 'REDIS_URL', google_cloud_secret('REDIS_URL'), secret: true


env 'AWS_RECORDING_STORAGE_BUCKET_NAME', google_cloud_secret('AWS_RECORDING_STORAGE_BUCKET_NAME'), secret: true
env 'AWS_ACCESS_KEY_ID', google_cloud_secret('AWS_ACCESS_KEY_ID'), secret: true
env 'AWS_SECRET_ACCESS_KEY', google_cloud_secret('AWS_SECRET_ACCESS_KEY'), secret: true

env 'ERROR_REPORTS_RECEIVER_EMAIL_ADDRESS', 'noah@attendee.dev'

# Run and scale any command on Kubernetes
proc :web, 'gunicorn attendee.wsgi'
proc :worker, 'celery -A attendee worker -l info', cpu: 4, ram: 2
